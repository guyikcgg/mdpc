str(data)
dim(data.factor)
sapply(data, class)
sum(sapply(data, class) == "integer")
sum(sapply(data, class) == "factor")
sum(sapply(data, class) == "numeric")
ggplot(data.sample) +
geom_bar(aes(class, fill = class))
ggplot(data) +
geom_bar(aes(class, fill = class))
ggplot(data.sample) +
geom_bar(aes(class, fill = class))
correlations = cor(data.numeric)
(sum(abs(correlations) > 0.8) - 41)/2
which((abs(correlations) > 0.8) & (abs(correlations) < 1), arr.ind = T)
myData = melt.data.frame(
cbind(data.numeric, class = data$class)
)
ggplot(myData) +
geom_density(aes(value)) +
geom_density(aes(value, color = class)) +
# Load required libraries
library(utils)
library(ggplot2)
library(reshape)
# Load the data
source("load-data.R")
# Set the random seed in order to be able to reproduce the results
set.seed(1)
# Visualize the structure of the data
dim(data)
str(data)
sum(sapply(data, class) == "factor") -1
sum(sapply(data, class) == "integer")
sum(sapply(data, class) == "numeric")
## Data contains 20000 registers from 50 attributes plus a class variable.
## 9 of the attributes are factors, whist the remaining 41 are numeric (
## 22 of which are integer, the other 19 being continous variables)
# Get a summary of the data
summary(data)
## There are too many variables to understand at once. Let's do it
## little by little.
### MISSING!! ###
# Plot frequency of each class
ggplot(data) +
geom_bar(aes(class, fill = class))
## We are facing an unbalanced problem
# Check for missing values
as.data.frame(colSums(is.na(data)))
## There are no missing values
# Plot numeric data
## Distributions
myData = melt.data.frame(
cbind(data.numeric, class = data$class)
)
ggplot(myData) +
geom_density(aes(value)) +
geom_density(aes(value, color = class)) +
facet_wrap(~variable, scales = "free")
ggplot(myData) +
geom_freqpoly(aes(value)) +
geom_freqpoly(aes(value, color = class)) +
facet_wrap(~variable, scales = "free")
ggplot(data) + geom_jitter(aes(PredSS_r1_.1, PredSS_r1, color = class), alpha = 0.1)
myData = subset(data, select = c(PredCN_r1, PredCN_r2, class))
myData = melt(myData)
ggplot(myData) +
geom_density(aes(value)) +
geom_density(aes(value, color = class)) +
facet_wrap(~variable, ncol = 1)
ggplot(data) + geom_jitter(aes(PredCN_r1, PredCN_r1, color = class), alpha = 0.1)
ggplot(data) + geom_jitter(aes(PredCN_r1, PredCN_r2, color = class), alpha = 0.1)
ggplot(data) + geom_bar(aes(class, fill = as.factor(PredCN_r1)))
ggplot(data) + geom_jitter(aes(PredCN_r1, PredCN_r1, color = class), alpha = 0.1)
ggplot(data) + geom_jitter(aes(PredCN_r1, PredCN_r2, color = class), alpha = 0.1)
ggplot(data) + geom_bar(aes(class, fill = as.factor(PredCN_r1)))
ggplot(data) + geom_bar(aes(class, fill = as.factor(PredCN_r2)))
cor(data$PredCN_r1, data$PredCN_r2)
ks.test(data$PredCN_r1, data$PredCN_r2)
ks.test(
subset(data, subset = class == "positive")$PredCN_r1,
subset(data, subset = class == "positive")$PredCN_r2
)
ks.test(
subset(data, subset = class == "negative")$PredCN_r1,
subset(data, subset = class == "negative")$PredCN_r2
)
ggplot(data) + geom_jitter(aes(PredSS_r1_.1, PredSS_r1, color = class), alpha = 0.1)
## being appropriate to omit one
findCorrelation(correlations, cutoff = 0.8)
source('/home/cristian10/workspace/master/mdpc/septiembre/attribute-selection.R', echo=TRUE)
?findCorrelation
data.numeric.simplified = subset(
data.numeric,
select = weights.chi.squared == 0
)
weights.chi.squared == 0
names(weights.chi.squared == 0)
names(weights.chi.squared)[weights.chi.squared == 0]
names(weights.chi.squared)
rownames(weights.chi.squared)[weights.chi.squared == 0]
drop.attributes =
rownames(weights.chi.squared)[weights.chi.squared == 0]
data.numeric.simplified =
data.numeric[, !(names(data.numeric) %in% drop.attributes)]
correlations = cor(data.numeric.simplified)
findCorrelation(correlations, cutoff = 0.8)
data.numeric.simplified = data.numeric.simplified[, -drop.attributes]
drop.attributes = findCorrelation(correlations, cutoff = 0.8)
data.numeric.simplified = data.numeric.simplified[, -drop.attributes]
source('/home/cristian10/workspace/master/mdpc/septiembre/attribute-selection.R', echo=TRUE)
drop.attributes =
rownames(weights.chi.squared)[weights.chi.squared == 0]
names(data.numeric) %in% drop.attributes
which(names(data.numeric) %in% drop.attributes)
unique(c(1,2,3,2))
source('/home/cristian10/workspace/master/mdpc/septiembre/attribute-selection.R', echo=TRUE)
install.packages("NoiseFiltersR")
?IPF
library(NoiseFiltersR)
?IPF
out = IPF(class~., data.numeric.simplified)
out = IPF(class~., cbind(data.numeric.simplified, data$class))
out = IPF(class~., cbind(data.numeric.simplified, class = data$class))
summary(out, explicit = T)
identical(out$cleanData, data.numeric.simplified[setdiff(1:nrow(data.numeric.simplified), out$remIdx), ])
out$cleanData
dim(out$cleanData)
out = IPF(
formula = class~.,
data = cbind(data.numeric.simplified, class = data$class),
nfolds = 5,
consensus = T,
p = 0.01
)
dim(out$cleanData)
out = IPF(
formula = class~.,
data = cbind(data.numeric.simplified, class = data$class),
nfolds = 3,
consensus = T,
p = 0.01
)
dim(out$cleanData)
set.seed(1)
out = IPF(
formula = class~.,
data = cbind(data.numeric.simplified, class = data$class)
)
dim(out$cleanData)
set.seed(1)
out = IPF(
formula = class~.,
data = data
)
dim(out$cleanData)
ggplot(out$cleanData) + geom_bar(aes(class, color = class))
ggplot(out$cleanData) + geom_bar(aes(class, fill = class))
count(1:3)
sum(out$cleanData$class == "positive")
sum(out$cleanData$class == "negative")
p = sum(out$cleanData$class == "positive")
n = sum(out$cleanData$class == "negative")
n/p
p = sum(data$class == "positive")
n = sum(data$class == "negative")
n/p
p = sum(out$cleanData$class == "positive")
n = sum(out$cleanData$class == "negative")
p/n
p = sum(data$class == "positive")
n = sum(data$class == "negative")
p/n
set.seed(1)
out = IPF(
formula = class~.,
data = data,
nfolds = 3,
p = 0.005
)
dim(out$cleanData)
set.seed(1)
out = IPF(
formula = class~.,
data = data,
nfolds = 3,
p = 0.005,
y = 0.9
)
out = IPF(
formula = class~.,
data = data,
nfolds = 3,
p = 0.005,
y = 0.995
)
dim(out$cleanData)
set.seed(1)
out = IPF(
formula = class~.,
data = data,
nfolds = 3,
y = 0.999
)
dim(out$cleanData)
p = sum(out$cleanData$class == "positive")
n = sum(out$cleanData$class == "negative")
p/n
p = sum(data$class == "positive")
n = sum(data$class == "negative")
p/n
set.seed(1)
out = IPF(
formula = class~.,
data = c(data.numeric.simplified, data$class),
nfolds = 3
)
set.seed(1)
out = IPF(
formula = class~.,
data = c(data.numeric.simplified, class = data$class),
nfolds = 3
)
set.seed(1)
out = IPF(
formula = class~.,
data = cbind(data.numeric.simplified, class = data$class),
nfolds = 3
)
p = sum(out$cleanData$class == "positive")
n = sum(out$cleanData$class == "negative")
p/n
p = sum(data$class == "positive")
n = sum(data$class == "negative")
p/n
set.seed(1)
out = IPF(
formula = class~.,
data = cbind(data.numeric.simplified, class = data$class),
nfolds = 10
)
dim(out$cleanData)
p = sum(out$cleanData$class == "positive")
n = sum(out$cleanData$class == "negative")
p/n
p = sum(data$class == "positive")
n = sum(data$class == "negative")
p/n
outliers = outlier(data.numeric.simplified)
library(outliers)
outliers = outlier(data.numeric.simplified)
outliers
outliers = outlier(data.numeric.simplified)
outliers
dim(outliers)
dim(outliers)
class(outliers)
ggplot(data) + geom_bar(mapping = aes(x=AA_freq_central_A))
ggplot(data) + geom_bar(mapping = aes(AA_freq_central_A))
ggplot(data) + geom_bar(aes(AA_freq_central_A))
ggplot(data) + geom_bar(aes(AA_freq_central_A, fill = class))
?outlier
rm.outlier(data.numeric.simplified)
rm.outlier(data.numeric.simplified, fill = T)
source('~/.cache/.fr-TnxvAB/!Outliers_A2_Librer¡as_a_cargar_en_cada_sesi¢n.R', echo=TRUE)
# M?ster -> Detecci?n de anomal?as
# Juan Carlos Cubero. Universidad de Granada
###########################################################################
# Paquetes usados a lo largo del curso
###########################################################################
#Gr?ficos
#install.packages("ggplot2")
library(ggplot2)
#install.packages("devtools")
library(devtools)
#install_github("ggbiplot", "vqv")
library(reshape)   # melt
library(ggbiplot)
#install.packages("rgl")     #plot3D
library(rgl)
#install.packages("GGally")  #ggpairs
library(GGally)
################################################################################
# 1-variate
#install.packages("outliers")  # Grubb
library(outliers)
#install.packages("EnvStats")  # Rosner
library(EnvStats)
################################################################################
# Multi-variate -Mahalanobis-
#install.packages("mvoutlier")  #MCD ChiC
library(mvoutlier)
#install.packages("CerioliOutlierDetection")  #MCD Hardin Rocke
library(CerioliOutlierDetection)
#install.packages("robustbase")
library(robustbase)
#install.packages("mvnormtest")   # Test Normalidad multivariante
library(mvnormtest)
#install.packages("MASS")
library(MASS)
################################################################################
# Multivariate Unsupervised
#install.packages("DMwR")  #lof
library(DMwR)
#install.packages("cluster")
library(cluster)    # PAM
# M?ster -> Detecci?n de anomal?as
# Juan Carlos Cubero. Universidad de Granada
###########################################################################
# Funciones utilizadas a lo largo del curso
###########################################################################
rm(list=ls())
#######################################################################
# Muestra un plot b?sico con los outliers en rojo
# Necesita como par?metros de entrada:
# el dataset "datos", un vector de T/F indicando si el registro i-?simo
# de "datos" es o no un outlier (seg?n el m?todo aplicado)
# y el t?tulo a aparecer en el gr?fico
MiPlot_Univariate_Outliers = function (datos, indices_de_Outliers, titulo){
numero.de.datos = nrow(as.matrix(datos))
vectorTFoutliers =  rep(FALSE, numero.de.datos)
vectorTFoutliers[indices_de_Outliers] = TRUE
vector.colores.outlier = rep("black", numero.de.datos)
vector.colores.outlier [vectorTFoutliers] = "red"
cat("\nN?mero de datos: ")
cat(numero.de.datos)
cat("\n?Qui?n es outlier?: ")
cat(vectorTFoutliers)
cat('\n')
windows()
plot(datos, col=vector.colores.outlier, main = titulo)
}
###########################################################################
# Calcula los outliers IQR
# Devuelve un vector TRUE/FALSE indicando si el registro i-?simo
# de "datos" es o no un outlier IQR con respecto a la columna de ?ndice "indice"
# coef es 1.5 para los outliers normales y hay que pasarle 3 para los outliers extremos
vector_es_outlier_IQR = function (datos, indice.de.columna, coef = 1.5){
columna.datos = datos[,indice.de.columna]
cuartil.primero = quantile(columna.datos)[2]  #quantile[1] es el m?nimo y quantile[5] el m?ximo.
cuartil.tercero = quantile(columna.datos)[4]
iqr = cuartil.tercero - cuartil.primero
extremo.superior.outlier = (iqr * coef) + cuartil.tercero
extremo.inferior.outlier = cuartil.primero - (iqr * coef)
es.outlier  = columna.datos > extremo.superior.outlier |
columna.datos < extremo.inferior.outlier
return (es.outlier)
}
###########################################################################
# Devuelve un vector con las claves de los outliers IQR
# con respecto a la columna de ?ndice "indice"
# coef es 1.5 para los outliers normales y hay que pasarle 3 para los outliers extremos
vector_claves_outliers_IQR = function(datos, indice, coef = 1.5){
columna.datos = datos[,indice]
vector.de.outliers = vector_es_outlier_IQR(datos, indice, coef)
which(vector.de.outliers  == TRUE)
}
#######################################################################
# Devuelve los nombres de aquellas filas de datos especificadas
# en el segundo par?metro (vector de T/F)
Nombres_de_Filas = function (datos, vector_TF_datos_a_incluir) {
numero.de.filas = nrow(datos)
if (is.null(row.names(datos)))
row.names(datos) = rep(1:numero.de.filas)
nombres.de.filas = rep("", numero.de.filas)
nombres.de.filas[vector_TF_datos_a_incluir==TRUE] = row.names(datos)[vector_TF_datos_a_incluir==TRUE]
nombres.de.filas
}
#######################################################################
# Calcula los outliers IQR y muestra sus etiquetas en un BoxPlot
MiBoxPlot_IQR_Univariate_Outliers = function (datos, indice.de.columna, coef = 1.5){
# Importante: Para que aes busque los par?metros en el ?mbito local, debe incluirse  environment = environment()
datos = as.data.frame(datos)
vector.TF.outliers.IQR = vector_es_outlier_IQR(datos, indice.de.columna, coef)
nombres.de.filas = Nombres_de_Filas(datos, vector.TF.outliers.IQR)
nombre.de.columna = colnames(datos, indice.de.columna)
ggboxplot = ggplot(data = datos, aes(x=factor(""), y=datos[,indice.de.columna]) , environment = environment()) +
xlab(nombre.de.columna) + ylab("") +
geom_boxplot(outlier.colour = "red") +
geom_text(aes(label = nombres.de.filas)) #, position = position_jitter(width = 0.1))
windows()
ggboxplot
}
#######################################################################
# Muestra de forma conjunta todos los BoxPlots de las columnas de datos
# Para ello, normaliza los datos.
# Tambi?n muestra con un punto en rojo los outliers de cada columna
# Para hacerlo con ggplot, lamentablemente hay que construir antes una tabla
# que contenga en cada fila el valor que a cada tupla le da cada variable -> paquete reshape->melt
MiBoxPlot_juntos  = function (datos, vector_TF_datos_a_incluir = c()){
# Requiere reshape
# Importante: Para que aes busque los par?metros en el ?mbito local, debe incluirse  environment = environment()
nombres.de.filas = Nombres_de_Filas(datos, vector_TF_datos_a_incluir)
datos = scale(datos)
datos.melted = melt(datos)
colnames(datos.melted)[2]="Variables"
colnames(datos.melted)[3]="zscore"
factor.melted = colnames(datos.melted)[1]
columna.factor = as.factor(datos.melted[,factor.melted])
levels(columna.factor)[!levels(columna.factor) %in% nombres.de.filas] = ""
ggplot(data = datos.melted, aes(x=Variables, y=zscore), environment = environment()) +
geom_boxplot(outlier.colour = "red") +
geom_text(aes(label = columna.factor), size = 3)
}
#######################################################################
# Muestra de forma conjunta todos los BoxPlots de las columnas de datos
# Para ello, normaliza los datos
# Tambi?n muestra las etiquetas de los outliers de cada columna
MiBoxPlot_juntos_con_etiquetas = function (datos, coef = 1.5){
matriz.datos.TF.outliers = sapply(1:ncol(datos), function(x) vector_es_outlier_IQR(datos, x, coef))  # Aplicamos outlier IQR a cada columna
vector.datos.TF.outliers = apply(matriz.datos.TF.outliers, 1, sum)
vector.datos.TF.outliers[vector.datos.TF.outliers > 1] = 1            # Si un registro es outlier en alguna columna lo incluimos
MiBoxPlot_juntos(datos, vector.datos.TF.outliers)
}
#######################################################################
# Aplica el test de Grubbs e imprime los resultados
MiPlot_resultados_TestGrubbs = function(datos){
alpha = 0.05
test.de.Grubbs = grubbs.test(datos, two.sided = TRUE)
cat('p.value: ')
cat(test.de.Grubbs$p.value)
cat('\n')
if (test.de.Grubbs$p.value < alpha){
indice.de.outlier.Grubbs = order(abs(datos - mean(datos)), decreasing = T)[1]
indice.de.outlier.Grubbs
cat('?ndice de outlier: ')
cat(indice.de.outlier.Grubbs)
cat('\n')
valor.de.outlier.Grubbs  = datos[indice.de.outlier.Grubbs]
cat('Valor del outlier: ')
cat(valor.de.outlier.Grubbs)
MiPlot_Univariate_Outliers (datos, "Test de Grubbs", indice.de.outlier.Grubbs)
}
else
cat('No hay outliers')
}
#######################################################################
# Aplica el test de Rosner e imprime los resultados
MiPlot_resultados_TestRosner = function(datos){
test.de.rosner = rosnerTest(datos, k=4)
is.outlier.rosner = test.de.rosner$all.stats$Outlier
k.mayores.desviaciones.de.la.media = test.de.rosner$all.stats$Obs.Num
indices.de.outliers.rosner = k.mayores.desviaciones.de.la.media[is.outlier.rosner]
valores.de.outliers.rosner = datos[indices.de.outliers.rosner]
cat("\nTest de Rosner")
cat("\n?ndices de las k-mayores desviaciones de la media: ")
cat(k.mayores.desviaciones.de.la.media)
cat("\nDe las k mayores desviaciones, ?Qui?n es outlier? ")
cat(is.outlier.rosner)
cat("\nLos ?ndices de los outliers son: ")
cat(indices.de.outliers.rosner)
cat("\nLos valores de los outliers son: ")
cat(valores.de.outliers.rosner)
MiPlot_Univariate_Outliers (datos, indices.de.outliers.rosner, "Test de Rosner")
}
MiBiplot = function(datos){
PCA.model = princomp(scale(datos))
biplot = ggbiplot(PCA.model, obs.scale = 1, var.scale=1 , varname.size = 5,alpha = 1/2)
windows()
print(biplot)
}
MiBiPlot_Multivariate_Outliers = function (datos, vectorTFoutliers, titulo){
identificadores_de_datos = rownames(datos)
identificadores_de_datos[!vectorTFoutliers] = ''
cat(identificadores_de_datos)
PCA.model = princomp(scale(datos))
outlier.shapes = c(".","x") #c(21,8)
biplot = ggbiplot(PCA.model, obs.scale = 1, var.scale=1 , varname.size = 5,groups =  vectorTFoutliers, alpha = 1/2) #alpha = 1/10,
biplot = biplot + labs(color = "Outliers")
biplot = biplot + scale_color_manual(values = c("black","red"))
biplot = biplot + geom_text(label = identificadores_de_datos, stat = "identity", size = 3, hjust=0, vjust=0)
biplot = biplot + ggtitle(titulo)
windows()
print(biplot)
}
# Dentro de MiBiPlot_Clustering_Outliers se llama a la funci?n ggbiplot, la cual est? basada
# en la funci?n ggplot que tiene un bug de dise?o ya que dentro del par?metro aes
# s?lo se pueden llamar a variables del entorno global y no del entorno local.
# Por tanto, desgraciadamente, debemos establecer variables globales que
# son usadas dentro de nuestra funci?n MiBiPlot_Clustering_Outliers:
# BIPLOT.isOutlier
# BIPLOT.asignaciones.clusters
# BIPLOT.cluster.colors
MiBiPlot_Clustering_Outliers = function (datos, titulo){
PCA.model = princomp(scale(datos))
outlier.shapes = c("o","x") #c(21,8)
identificadores_de_datos = rownames(datos)
identificadores_de_datos[!BIPLOT.isOutlier] = ''
#cat(identificadores_de_datos)
BIPLOT.asignaciones.clusters = factor(BIPLOT.asignaciones.clusters)
biplot = ggbiplot(PCA.model, obs.scale = 1, var.scale=1 , varname.size = 3, alpha = 0) +
geom_point(aes(shape = BIPLOT.isOutlier, colour = factor(BIPLOT.asignaciones.clusters)))  +
scale_color_manual(values = BIPLOT.cluster.colors) +
scale_shape_manual(values = outlier.shapes) +
ggtitle(titulo) +
geom_text(label = identificadores_de_datos, stat = "identity", size = 3, hjust=0, vjust=0)
windows()
print(biplot)
}
?scale
# Load required libraries
library(utils)
library(ggplot2)
library(reshape)
# Load the data
source("load-data.R")
source('/home/cristian10/workspace/master/mdpc/septiembre/attribute-selection.R', echo=TRUE)
data.numeric.simplified.scaled = scale(data.numeric.simplified)
mvoutlier.plot = uni.plot(data.numeric.simplified.scaled, symb=FALSE, alpha = alpha.value.penalizado)
?mvoutlier
?mvoutlier.plot
?uni.plot
